@{
    ViewData["Title"] = "日志分析";
}

<ul class="nav nav-tabs mb-3" id="logTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="analysis-tab" data-bs-toggle="tab" data-bs-target="#analysis" type="button" role="tab" aria-controls="analysis" aria-selected="true">
            日志分析
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="live-tab" data-bs-toggle="tab" data-bs-target="#live" type="button" role="tab" aria-controls="live" aria-selected="false">
            实时日志
        </button>
    </li>
</ul>

<div class="tab-content" id="logTabsContent">
    <div class="tab-pane fade show active" id="analysis" role="tabpanel" aria-labelledby="analysis-tab">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">请求日志分析</h5>
                    </div>
                    <div class="card-body">
                        <form id="requestLogForm">
                            <div class="mb-3">
                                <label for="requestLogPath" class="form-label">日志文件路径</label>
                                <input type="text" class="form-control" id="requestLogPath" required>
                            </div>
                            <button type="submit" class="btn btn-primary">分析请求日志</button>
                        </form>
                        <div id="requestLogResult" class="mt-3"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">错误日志分析</h5>
                    </div>
                    <div class="card-body">
                        <form id="errorLogForm">
                            <div class="mb-3">
                                <label for="errorLogPath" class="form-label">日志文件路径</label>
                                <input type="text" class="form-control" id="errorLogPath" required>
                            </div>
                            <button type="submit" class="btn btn-primary">分析错误日志</button>
                        </form>
                        <div id="errorLogResult" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="tab-pane fade" id="live" role="tabpanel" aria-labelledby="live-tab">
        <div class="card">
            <div class="card-header">
                <form id="streamLogForm" class="mb-0">
                    <div class="input-group">
                        <input type="text" class="form-control" id="streamLogPath" placeholder="输入日志文件路径" required>
                        <button class="btn btn-primary" type="submit">开始监控</button>
                        <button class="btn btn-danger" type="button" id="stopStreaming" disabled>停止</button>
                        <button class="btn btn-secondary" type="button" id="clearLog">清除</button>
                        <div class="input-group-text">
                            <div class="form-check form-switch mb-0">
                                <input class="form-check-input" type="checkbox" id="autoScroll" checked>
                                <label class="form-check-label" for="autoScroll">自动滚动</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="card-body p-0">
                <pre id="logStream" class="bg-dark text-light p-3" style="height: 500px; overflow-y: auto; margin: 0; border-radius: 0;"></pre>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let streamingInterval;
        let lastPosition = 0;
        let autoScroll = true;

        function appendToLogStream(content) {
            const logStream = document.getElementById('logStream');
            logStream.textContent += content;
            if (autoScroll) {
                logStream.scrollTop = logStream.scrollHeight;
            }
        }

        async function streamLog(logPath) {
            try {
                const response = await fetch(`/LogAnalysis/StreamLog?logPath=${encodeURIComponent(logPath)}&lastPosition=${lastPosition}`);
                const data = await response.json();
                
                if (data.error) {
                    appendToLogStream(`错误: ${data.error}\n`);
                    return false;
                }

                if (data.content) {
                    appendToLogStream(data.content);
                    lastPosition = data.position;
                }

                return true;
            } catch (error) {
                appendToLogStream(`错误: ${error.message}\n`);
                return false;
            }
        }

        document.getElementById('streamLogForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const logPath = document.getElementById('streamLogPath').value;
            document.getElementById('logStream').textContent = '';
            lastPosition = 0;
            
            document.getElementById('stopStreaming').disabled = false;
            
            // Initial stream
            if (await streamLog(logPath)) {
                // Continue streaming every second
                streamingInterval = setInterval(() => streamLog(logPath), 1000);
            }
        });

        document.getElementById('stopStreaming').addEventListener('click', function() {
            clearInterval(streamingInterval);
            this.disabled = true;
        });

        document.getElementById('clearLog').addEventListener('click', function() {
            document.getElementById('logStream').textContent = '';
        });

        document.getElementById('autoScroll').addEventListener('change', function() {
            autoScroll = this.checked;
        });

        // Request Log Analysis
        document.getElementById('requestLogForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const logPath = document.getElementById('requestLogPath').value;
            const resultDiv = document.getElementById('requestLogResult');
            
            try {
                const response = await fetch('/LogAnalysis/AnalyzeRequestLog', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `logPath=${encodeURIComponent(logPath)}`
                });
                
                const result = await response.json();
                resultDiv.innerHTML = `<pre class="bg-light p-3 mt-3">${JSON.stringify(result, null, 2)}</pre>`;
            } catch (error) {
                resultDiv.innerHTML = `<div class="alert alert-danger mt-3">错误: ${error.message}</div>`;
            }
        });

        // Error Log Analysis
        document.getElementById('errorLogForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const logPath = document.getElementById('errorLogPath').value;
            const resultDiv = document.getElementById('errorLogResult');
            
            try {
                const response = await fetch('/LogAnalysis/AnalyzeErrorLog', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `logPath=${encodeURIComponent(logPath)}`
                });
                
                const result = await response.json();
                resultDiv.innerHTML = `<pre class="bg-light p-3 mt-3">${JSON.stringify(result, null, 2)}</pre>`;
            } catch (error) {
                resultDiv.innerHTML = `<div class="alert alert-danger mt-3">错误: ${error.message}</div>`;
            }
        });
    </script>
}
